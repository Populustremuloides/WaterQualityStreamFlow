# -*- coding: utf-8 -*-
"""wavelet_transforms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NOhBSZV5uZdlxS0GZCJ7rPpXksg1UKE8
"""

import pywt
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

"""# Function to get n day moving average"""

def Moving_average(days):
    flow_data = pd.read_csv("epa_flow_data.csv").T
    end = flow_data.shape[1]
    holder = None
    for i in range (days-1):
        if holder is None:
            holder= flow_data.iloc[:,:end - (days-1)]
        else:
            holder+=flow_data.iloc[:,i:end - (days-1)+i]
        holder = holder/days
        cA,cD = pywt.dwt(holder,'db1')
        cA = pd.DataFrame(cA)
        cA.to_csv(f"{days}_Day_Moving_Average_Transformed.csv")
    return holder

# data = pd.read_csv("epa_flow_data.csv").T
# data = Moving_average(3)

"""
# 3 Day moving Average"""

from scipy.signal import cwt as wv
from scipy.signal import ricker as ricker



# Data = Moving_average(5)
# Data = Data.T
# # Data = Data.drop(0,axis = 0)
# print(Data.iloc[:,0])

def plot_wavelet(time, signal, scales,
                 waveletname = 'cmor', 
                 cmap = plt.cm.seismic, 
                 title = 'Wavelet Transform (Power Spectrum) of hydrograph',
                 ylabel = 'Period (days)',
                 xlabel = 'Time'):

    plt.plot(signal)
    plt.xlabel("day in water year")
    plt.ylabel("specific discharge (flow volume / (time * area))")
    plt.title("example hydrograph")
    plt.show()
    dt = time[1] - time[0]
    [coefficients, frequencies] = pywt.cwt(signal, scales, waveletname, dt)
    power = (abs(coefficients)) ** 2
    period = 1. / frequencies
    levels = [0.0625, 0.125, 0.25, 0.5, 1, 2, 4, 8]
    contourlevels = np.log2(levels)

    fig, ax = plt.subplots(figsize=(15, 10))
    im = ax.contourf(time, np.log2(period), np.log2(power), extend='both',cmap=cmap)
    print(power,"power")

    ax.set_title(title, fontsize=20)
    ax.set_ylabel(ylabel, fontsize=18)
    ax.set_xlabel(xlabel, fontsize=18)

    yticks = 2**np.arange(np.ceil(np.log2(period.min())), np.ceil(np.log2(period.max())))
    ax.set_yticks(np.log2(yticks))
    ax.set_yticklabels(yticks)
    ax.invert_yaxis()
    ylim = ax.get_ylim()
    ax.set_ylim(ylim[0], -1)

    cbar_ax = fig.add_axes([0.95, 0.5, 0.03, 0.25])
    fig.colorbar(im, cax=cbar_ax, orientation="vertical")
    plt.show()
    return power,period

# for k in [3,6,12]:
df = pd.read_csv("epa_flow_data.csv")  #Moving_average(k)
print(df)
# quit()
# Data = Data.T
# Data = Data.drop([i for i in np.arange(k-2)],axis = 0)
# for i in range(Data.shape[1]):
dataDict = {}
i = 0
for col in df.columns:
    if i % 10 == 0:
        print(i)
    flowData = np.asarray(df[col])
    N = flowData.shape[0]
    t0=1
    dt=1
    time = np.arange(0, N) * dt + t0

    scales = np.arange(1, 365 * 2)
    pow_,per_ = plot_wavelet(time, flowData, scales)

    meanPowers = np.mean(pow_, axis=1)
    meanPowers = (meanPowers - np.min(meanPowers)) / (np.max(meanPowers) - np.min(meanPowers))

    plt.plot(meanPowers)
    plt.xlabel("period length")
    plt.ylabel("spectral power")
    plt.title("example time-averaged wavelet decomposition")
    plt.show()

    dataDict[col] = meanPowers
    i = i + 1

outDf = pd.DataFrame.from_dict(dataDict)
outDf.to_csv("epa_spectral_data.csv", index=False)


# plt.show()
# pd.DataFrame(pow_).to_csv()
#
# Data.shape
#
# Data
#
# data = data.fillna(method = 'ffill')
#
# [i for i in np.arange(5-2)]
#
# import pandas as pd
#
# data2 = pd.read_csv('Transforms/12_dayMA/0_period.csv')
# data2.shape
#
# data = pd.read_csv('Transforms/12_dayMA/0_power.csv')
# data.shape
#
# from matplotlib import pyplot as plt
#
# plt.imshow(data2)

